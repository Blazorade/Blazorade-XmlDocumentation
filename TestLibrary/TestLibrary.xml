<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestLibrary</name>
    </assembly>
    <members>
        <member name="T:TestLibrary.SomeNamespace.Class1">
            <summary>
            Just a class for no reason.
            </summary>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.#ctor(System.String)">
            <summary>
            An overloaded version of the constructor.
            </summary>
            <param name="input"></param>
        </member>
        <member name="E:TestLibrary.SomeNamespace.Class1.BeforeEvent">
            <summary>
            The event that is fired before the actual event.
            </summary>
        </member>
        <member name="E:TestLibrary.SomeNamespace.Class1.AfterEvent">
            <summary>
            The event that is fired after the actual event.
            </summary>
        </member>
        <member name="F:TestLibrary.SomeNamespace.Class1.Field1">
            <summary>
            Just a field.
            </summary>
        </member>
        <member name="F:TestLibrary.SomeNamespace.Class1.DefaultTimestamp">
            <summary>
            A timestamp that can be used for various purposes.
            </summary>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class1.Prop1">
            <summary>
            A <see cref="T:System.String"/> property.
            </summary>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class1.IsProp2">
            <summary>
            This property is typed as <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.Foo">
            <summary>
            A foo method.
            </summary>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.Foo(System.String)">
            <summary>
            A foo method with a parameter.
            </summary>
            <param name="what">A simple string parameter with some <c>fancy</c> docs.</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.Foo``1">
            <summary>
            A generic method with no parameters.
            </summary>
            <typeparam name="TOut">The type for the return value.</typeparam>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.Foo``1(``0)">
            <summary>
            A foo method with a generic parameter.
            </summary>
            <typeparam name="TWhat">The type for the <paramref name="what"/> parameter. Currently, this can be anything.</typeparam>
            <param name="what">The parameter documentation.</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.Foo``2(``0,``1)">
            <summary>
            Yet another foo method without a reason.
            </summary>
            <typeparam name="T1">A type parameter. Specifies type for <paramref name="in1"/>.</typeparam>
            <typeparam name="T2">Another type parameter. Specifies type for <paramref name="in2"/>.</typeparam>
            <param name="in1">The type for <paramref name="in1"/>.</param>
            <param name="in2">The type for <paramref name="in2"/>.</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.Foo``2(``0)">
            <summary>
            A generic foo method with both input and output being defined as generic types.
            </summary>
            <typeparam name="TIn">The type to put in to the method.</typeparam>
            <typeparam name="TOut">The type to get out from the method.</typeparam>
            <param name="input">The actual input, which is typed by <typeparamref name="TIn"/>.</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class1.Foo``4(``0,``1,``2)">
            <summary>
            A Foo method with lots of generics.
            </summary>
        </member>
        <member name="T:TestLibrary.SomeNamespace.Class2">
            <summary>
            Another class.
            </summary>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class2.Foo``1(``0)">
            <summary>
            Method with generic input.
            </summary>
            <typeparam name="TIn">Type for <paramref name="inParam"/>.</typeparam>
            <param name="inParam">The parameter, which is typed by <typeparamref name="TIn"/>.</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class2.Foo``1">
            <summary>
            Method with generic output.
            </summary>
            <typeparam name="TOut">The type for the return value.</typeparam>
        </member>
        <member name="T:TestLibrary.SomeNamespace.Class3`2">
            <summary>
            A generic dictionary class.
            </summary>
            <typeparam name="TKey">The type for the dictionary key.</typeparam>
            <typeparam name="TItem">The type for the values in the dictionary.</typeparam>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class3`2.#ctor">
            <summary>
            Creates an instance without loading stuff into the instance.
            </summary>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class3`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates an instance and loads it with stuff from <paramref name="source"/>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class3`2.Item(`0)">
            <summary>
            Returns the item with the given key.
            </summary>
            <param name="key">The key of the item to return.</param>
            <returns>Returns the item, or maybe not.</returns>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class3`2.Item(System.Int32)">
            <summary>
            Returns the item at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index for the item to return.</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class3`2.Foo(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            A function with a generic dictionary as parameter.
            </summary>
            <param name="dictionary">A dictionary that uses the generic type parameters specified on the class.</param>
        </member>
        <member name="T:TestLibrary.SomeNamespace.Class4`1">
            <summary>
            Just a <c>class</c>...
            </summary>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class4`1.Item(System.Int32)">
            <summary>
            A read-only indexed property.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:TestLibrary.SomeNamespace.Class5">
            <summary>
            A class with different types of properties.
            </summary>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class5.Item(System.String)">
            <summary>
            Just an indexed property.
            </summary>
            <param name="key">The key of the item to return.</param>
            <returns>Retrns the item that matches the given key.</returns>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class5.Item(System.Int32)">
            <summary>
            A indexed property with different type of indexer.
            </summary>
            <param name="index">The zero-based index of the item to return.</param>
            <returns>Returns the item at the given index.</returns>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class5.ReadWriteProperty">
            <summary>
            A read-write property.
            </summary>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class5.ReadOnlyProperty">
            <summary>
            A read-only property.
            </summary>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class5.WriteOnlyProperty">
            <summary>
            A write-only property.
            </summary>
        </member>
        <member name="P:TestLibrary.SomeNamespace.Class5.ImplementedProperty">
            <summary>
            A property with actual implementation.
            </summary>
        </member>
        <member name="T:TestLibrary.SomeNamespace.Class6`1">
            <summary>
            A generic class with one constructor taking a generic parameter.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class6`1.#ctor(`0)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="input">The input for the constructor.</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class6`1.#ctor(System.String,`0)">
            <summary>
            A constructor with one normal parameter and one generic.
            </summary>
            <param name="text">Just some text.</param>
            <param name="input">The generic parameter.</param>
        </member>
        <member name="T:TestLibrary.SomeNamespace.Class7`2">
            <summary>
            A generic class with two generic type arguments and two different constructors using
            these generic arguments as parameters.
            </summary>
            <typeparam name="T1">Type #1</typeparam>
            <typeparam name="T2">Type #2</typeparam>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class7`2.#ctor(`0)">
            <summary>
            Constructor with the first generic parameter.
            </summary>
            <param name="t1">Parameter #1</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class7`2.#ctor(`1)">
            <summary>
            Constructor with the second generic parameter.
            </summary>
            <param name="t2">Type #2</param>
        </member>
        <member name="M:TestLibrary.SomeNamespace.Class7`2.#ctor(`0,`1)">
            <summary>
            Constructor with two generic parameters.
            </summary>
            <param name="t1">Parameter #1</param>
            <param name="t2">Parameter #2</param>
        </member>
    </members>
</doc>
