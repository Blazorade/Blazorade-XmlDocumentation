<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestLibrary</name>
    </assembly>
    <members>
        <member name="T:TestLibrary.Class1">
            <summary>
            Just a class for no reason.
            </summary>
        </member>
        <member name="M:TestLibrary.Class1.Foo">
            <summary>
            A foo method.
            </summary>
        </member>
        <member name="M:TestLibrary.Class1.Foo(System.String)">
            <summary>
            A foo method with a parameter.
            </summary>
            <param name="what">A simple string parameter with some <c>fancy</c> docs.</param>
        </member>
        <member name="M:TestLibrary.Class1.Foo``1">
            <summary>
            A generic method with no parameters.
            </summary>
            <typeparam name="TOut">The type for the return value.</typeparam>
        </member>
        <member name="M:TestLibrary.Class1.Foo``1(``0)">
            <summary>
            A foo method with a generic parameter.
            </summary>
            <typeparam name="TWhat">The type for the <paramref name="what"/> parameter. Currently, this can be anything.</typeparam>
            <param name="what">The parameter documentation.</param>
        </member>
        <member name="M:TestLibrary.Class1.Foo``2(``0,``1)">
            <summary>
            Yet another foo method without a reason.
            </summary>
            <typeparam name="T1">A type parameter. Specifies type for <paramref name="in1"/>.</typeparam>
            <typeparam name="T2">Another type parameter. Specifies type for <paramref name="in2"/>.</typeparam>
            <param name="in1">The type for <paramref name="in1"/>.</param>
            <param name="in2">The type for <paramref name="in2"/>.</param>
        </member>
        <member name="M:TestLibrary.Class1.Foo``2(``0)">
            <summary>
            A generic foo method with both input and output being defined as generic types.
            </summary>
            <typeparam name="TIn">The type to put in to the method.</typeparam>
            <typeparam name="TOut">The type to get out from the method.</typeparam>
            <param name="input">The actual input, which is typed by <typeparamref name="TIn"/>.</param>
        </member>
        <member name="T:TestLibrary.Class2">
            <summary>
            Another class.
            </summary>
        </member>
        <member name="M:TestLibrary.Class2.Foo``1(``0)">
            <summary>
            Method with generic input.
            </summary>
            <typeparam name="TIn">Type for <paramref name="inParam"/>.</typeparam>
            <param name="inParam">The parameter, which is typed by <typeparamref name="TIn"/>.</param>
        </member>
        <member name="M:TestLibrary.Class2.Foo``1">
            <summary>
            Method with generic output.
            </summary>
            <typeparam name="TOut">The type for the return value.</typeparam>
        </member>
    </members>
</doc>
